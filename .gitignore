# .NET Core
project.lock.json
project.fragment.lock.json
*.nuget.props
*.nuget.targets
*.user
*.userosscache
*.dotCover
*.vspscc
*.vssscc
.vs/
*.pidb
*.svclog
*.scc

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
build/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
msbuild.log
msbuild.err
msbuild.wrn

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
dotnet-tools.json
**/.config/dotnet-tools.json
pubxml
*.publishproj

# Tooling
*.pfx
*.publishsettings

# JetBrains Rider
.idea/
*.sln.iml

# VS Code
.vscode/

# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates

# Mono auto generated files
mono_crash.*
.mono

# Tye
.tye/

# Including strong name files can present a security risk
# (https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md)
*.snk

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
[Ss]tyle[Cc]op.*
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.p7s
*.vsmdi
*.vsto
*.xap

# Including this files can write to them during design-time builds
# (https://github.com/dotnet/aspnetcore/issues/13158)
# *.cshtml.cs
# *.razor.cs
# *.cshtml
# *.razor

# Rationale: https://github.com/aspnet/AspNetCore/issues/12061
Profile/

.env.local
.DS_Store